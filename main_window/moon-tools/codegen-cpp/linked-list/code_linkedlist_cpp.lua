require("common")

function code_cpp(names)
    printfnl("#include \"%s.h\"",names.file_name);
    printfnl("#include \"syslog.h\"");
    printfnl("#include \"mem_tool.h\"");
    printfnl("");
    
    printnl(g_cpp_base_codegen:Code_NameSpaceBegin());    

    printfnl("");
	printfnl("%s::%s()",names.c_entry_class_name,names.c_entry_class_name);
    printfnl("{");
    printfnl("    m_RawPtr = NULL;");
    printfnl("    next = NULL;");
    printfnl("    prev = NULL;");
    printfnl("}");
    printfnl("");
	printfnl("%s::~%s()",names.c_entry_class_name,names.c_entry_class_name);
    printfnl("{");
    printfnl("    DEL(m_RawPtr);");
    printfnl("    next = NULL;");
    printfnl("    prev = NULL;");
    printfnl("}");
    printfnl("");
	printfnl("%s* %s::get()",names.c_node_class_name,names.c_entry_class_name);
    printfnl("{");
    printfnl("    return m_RawPtr;");
    printfnl("}");
    printfnl("");
	printfnl("status_t %s::set(%s *node)",names.c_entry_class_name,names.c_node_class_name);
    printfnl("{");
    printfnl("    ASSERT(m_RawPtr == NULL);");
    printfnl("    m_RawPtr = node;");
    printfnl("    return OK;");
    printfnl("}");
    printfnl("");
    printfnl("/*********************************************/");
    printfnl("");
    printfnl("%s::%s()",names.c_class_name,names.c_class_name);
    printfnl("{");
    printfnl("    this->InitBasic();");
    printfnl("}");
    printfnl("%s::~%s()",names.c_class_name,names.c_class_name);
    printfnl("{");
    printfnl("    this->Destroy();");
    printfnl("}");
    printfnl("status_t %s::InitBasic()",names.c_class_name);
    printfnl("{");
    printfnl("    this->m_Head = NULL;");
    printfnl("    this->m_Tail = NULL;");
    printfnl("    this->m_Len = 0;");
    printfnl("    return OK;");
    printfnl("}");

    printfnl("status_t %s::Init(%s)",
        names.c_class_name,
        g_cpp_base_codegen:Code_InitParam()
    );

    printfnl("{");
    printfnl("    this->InitBasic();");

    printnl(g_cpp_base_codegen:Code_Init());    

    printfnl("    return OK;");
    printfnl("}");
    printfnl("status_t %s::Destroy()",names.c_class_name);
    printfnl("{");
	printfnl("    %s *q,*p = this->m_Head;",names.c_entry_class_name);
    printfnl("    while(p)");
    printfnl("    {");
    printfnl("        q = p;");
    printfnl("        p = p->next;");
	printfnl("        this->DelEntry(q);");
    printfnl("    }");
    printfnl("    this->InitBasic();");
    printfnl("    return OK;");
    printfnl("}");
    printfnl("");
	printfnl("status_t %s::AddFromHead(%s *node)",names.c_class_name,names.c_entry_class_name);
    printfnl("{");
    printfnl("    ASSERT(node);");
    printfnl("    if(this->m_Head)");
    printfnl("        this->m_Head->prev = node;");
    printfnl("    node->next = this->m_Head;");
    printfnl("    this->m_Head = node;");
    printfnl("    if(this->m_Tail == NULL)");
    printfnl("        this->m_Tail = node;");
    printfnl("    this->m_Len++;");
    printfnl("    return OK;");
    printfnl("}");
	printfnl("status_t %s::AddFromTail(%s *node)",names.c_class_name,names.c_entry_class_name);
    printfnl("{");
    printfnl("    ASSERT(node);");
    printfnl("    if(this->m_Tail)");
    printfnl("        this->m_Tail->next = node;");
    printfnl("    node->prev = this->m_Tail;");
    printfnl("    this->m_Tail = node;");
    printfnl("    if(this->m_Head == NULL)");
    printfnl("        this->m_Head = node;");
    printfnl("    this->m_Len++;");
    printfnl("    return OK;");
    printfnl("}");
    printfnl("bool %s::IsEmpty()",names.c_class_name);
    printfnl("{");
    printfnl("    return this->m_Head == NULL && this->m_Tail == NULL;");
	printfnl("}");
	printfnl("");
	printfnl("%s* %s::SearchFromHead(%s *node)",names.c_entry_class_name,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    %s *p = this->m_Head;",names.c_entry_class_name);
	printfnl("    while(p)");
	printfnl("    {");
    printfnl("        if(this->CompNode(p->get(),node) == 0)");
    printfnl("            return p;");
    printfnl("        p = p->next;");
    printfnl("    }");
    printfnl("    return NULL;");
	printfnl("}");
	printfnl("");
	printfnl("%s* %s::SearchFromTail(%s *node)",names.c_entry_class_name,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    %s *p = this->m_Tail;",names.c_entry_class_name);
	printfnl("    while(p)");
	printfnl("    {");
	printfnl("        if(this->CompNode(p->get(),node) == 0)");
	printfnl("            return p;");
	printfnl("        p = p->prev;");
	printfnl("    }");
	printfnl("    return NULL;    ");
	printfnl("}");
	printfnl("");
	printfnl("%s* %s::Remove(%s *node)",names.c_entry_class_name,names.c_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    ASSERT(node);");
	printfnl("");
	printfnl("    if(node->prev)");
    printfnl("        node->prev->next = node->next;");
    printfnl("    else");
    printfnl("        this->m_Head = node->next;");
    printfnl("");
    printfnl("    if(node->next)");
    printfnl("        node->next->prev = node->prev;");
    printfnl("    else");
    printfnl("        this->m_Tail = node->prev;");
    printfnl("");
    printfnl("    this->m_Len--;");
    printfnl("    node->prev = NULL;");
    printfnl("    node->next = NULL;");
    printfnl("    return node;");
    printfnl("}");
	printfnl("status_t %s::Delete(%s *node)",names.c_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    %s *elem = this->Remove(node);",names.c_entry_class_name);
	printfnl("    if(elem)");
	printfnl("    {");
	printfnl("        return this->DelEntry(elem);");
	printfnl("    }");
	printfnl("    return ERROR;");
	printfnl("}");
	printfnl("status_t %s::InsertAfter(%s *after, %s *node)",names.c_class_name,names.c_entry_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    ASSERT(node && after);");
	printfnl("    node->next = after->next;");
	printfnl("    if(after->next)");
	printfnl("        after->next->prev = node;");
	printfnl("    node->prev = after;");
	printfnl("    after->next = node;");
	printfnl("    if(after == this->m_Tail)");
	printfnl("        this->m_Tail = node;");
	printfnl("    this->m_Len++;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s::InsertBefore(%s *before, %s *node)",names.c_class_name,names.c_entry_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    ASSERT(node && before);");
	printfnl("    node->prev = before->prev;");
	printfnl("    if(before->prev)");
	printfnl("        before->prev->next = node;");
	printfnl("    node->next = before;");
	printfnl("    before->prev = node;");
	printfnl("    if(before == this->m_Head)");
	printfnl("        this->m_Head = node;");
	printfnl("    this->m_Len++;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("%s* %s::GetHead()",names.c_entry_class_name,names.c_class_name);
	printfnl("{");
	printfnl("    return this->m_Head;");
	printfnl("}");
	printfnl("");
	printfnl("%s* %s::GetTail()",names.c_entry_class_name,names.c_class_name);
	printfnl("{");
	printfnl("    return this->m_Tail;");
	printfnl("}");
	printfnl("");
	printfnl("int %s::GetLen()",names.c_class_name);
	printfnl("{");
	printfnl("    return this->m_Len;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s::Copy(%s *_list)",names.c_class_name,names.c_class_name);
	printfnl("{");
	printfnl("    %s *p;",names.c_entry_class_name);
	printfnl("");
	printfnl("    ASSERT(_list);");
	printfnl("");
	printfnl("    this->Destroy();");
	printfnl("    this->Init();");
	printfnl("");
	printfnl("    p = _list->m_Head;");
	printfnl("    while(p)");
	printfnl("    {");
	printfnl("        %s *entry;",names.c_entry_class_name);
	printfnl("        NEW(entry,%s);",names.c_entry_class_name);
	printfnl("        entry->set(this->CloneNode(p->get()));");
	printfnl("");
	printfnl("        if(!this->AddFromTail(entry))");
	printfnl("        {");
	printfnl("            return ERROR;");
	printfnl("        }");
	printfnl("");
	printfnl("        p = p->next;");
	printfnl("    }");
	printfnl("");
    printfnl("int %s::Comp(%s *_list)",names.c_class_name,names.c_class_name);
    printfnl("{");
    printfnl("    ASSERT(0);");
    printfnl("    return 0;");
    printfnl("}");
    printfnl("");
    printfnl("status_t %s::Print(CFileBase *_buf)",names.c_class_name);
    printfnl("{");
printfnl("    %s *p;",names.c_entry_class_name);
    printfnl("    p = this->m_Head;");
    printfnl("    while(p)");
    printfnl("    {");
    printfnl("        _buf->Log(\"{\");");
    printfnl("        _buf->IncLogLevel(1);");
    printfnl("        if(p->get())");
    printfnl("        {");
    printfnl("            p->get()->Print(_buf);");
    printfnl("        }");
    printfnl("        _buf->IncLogLevel(-1);");
    printfnl("        _buf->Log(\"} ->\");");
    printfnl("        p = p->next;");
    printfnl("    }");
    printfnl("    _buf->Log(\"len = %%d\",this->m_Len);");
    printfnl("    return OK;");
    printfnl("}");
	printfnl("");

	printfnl("status_t %s::DelEntry(%s *entry)",names.c_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    if(entry == NULL)");
	printfnl("        return ERROR;");
	printfnl("    DEL(entry);");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("//////////////////////////////////////////////////////");
	printfnl("int %s::CompNode(%s *node1, %s *node2)",names.c_class_name,names.c_node_class_name,names.c_node_class_name);
	printfnl("{");
    printfnl("    ASSERT(node1 && node2);");
    printfnl("    return node1->Comp(node2);");
    printfnl("}");
    printfnl("");
    printfnl("%s * %s::CloneNode(%s *node)",names.c_node_class_name,names.c_class_name,names.c_node_class_name);
    printfnl("{");
    printfnl("    %s *tmp;",names.c_node_class_name);
    printfnl("");
    printfnl("    ASSERT(node);");
    printfnl("");
    printfnl("    NEW(tmp,%s);",names.c_node_class_name);
    printfnl("    tmp->Init();");
    printfnl("    tmp->Copy(node);");
    printfnl("");
    printfnl("    return tmp;");
    printfnl("}");
   

    printfnl("");    
    printnl(g_cpp_base_codegen:Code_NameSpaceEnd());    
    printfnl("");
        
end