require("common")

function code_normal_cpp(names)
	printfnl("#include \"%s.h\"",to_file_name(names.class_name));
	common_include_c();
	printfnl("");
	printfnl("status_t %s_copy_node(%s *self,%s *dst, %s *src);",names.class_name_lower,names.c_class_name,names.c_node_class_name,names.c_node_class_name);
	printfnl("%s * %s_clone_node(%s *self,%s *node);",names.c_node_class_name,names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("status_t %s_del_node(%s *self,%s *node);",names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("int %s_comp_node(%s *self,%s *node1, %s *node2);",names.class_name_lower,names.c_class_name,names.c_node_class_name,names.c_node_class_name);
	printfnl("");
	printfnl("status_t %s_init_basic(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    self->data = NULL;");
	printfnl("    self->top = 0;;");
	printfnl("    self->size = 0;    ");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s_init(%s *self,int init_size)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    int i;");
	printfnl("    %s_init_basic(self);  ",names.class_name_lower);
	printfnl("    self->size = init_size;");
	printfnl("    X_MALLOC(self->data,%s * ,self->size);",names.c_node_class_name);
	printfnl("    for(i = 0; i < self->size; i++)");
	printfnl("        self->data[i] = NULL;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s_destroy(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    int i;");
	printfnl("    if(self == NULL)return ERROR;");
	printfnl("    if(self->data == NULL)");
	printfnl("        return ERROR;");
	printfnl("    for(i = 0; i < self->top; i++)");
	printfnl("    {");
	printfnl("        %s_del_node(self,self->data[i]);",names.class_name_lower);
	printfnl("    }");
	printfnl("    X_FREE(self->data);");
	printfnl("    %s_init_basic(self);    ",names.class_name_lower);
	printfnl("    return OK;");
	printfnl("}");
	printfnl("bool_t %s_is_empty(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    return self->top <= 0;");
	printfnl("}");
	printfnl("bool_t %s_is_full(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    return self->top >= self->size;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_auto_resize(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    int i;");
	printfnl("");
	printfnl("    if(%s_is_full(self))",names.class_name_lower);
	printfnl("    {");
	printfnl("        X_REALLOC(self->data,%s*,self->size,self->size*2);",names.c_node_class_name);
	printfnl("        self->size *= 2;");
	printfnl("        for(i = self->top; i < self->size; i++)");
	printfnl("        {");
	printfnl("            self->data[i] = NULL;");
	printfnl("        }");
	printfnl("    }");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_push(%s *self,%s *node)",names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    %s *tmp;",names.c_node_class_name);
	printfnl("    ASSERT(node);");
	printfnl("    tmp = %s_clone_node(self,node);",names.class_name_lower);
	printfnl("    if(!%s_push_ptr(self,tmp))",names.class_name_lower);
	printfnl("    {");
	printfnl("        %s_del_node(self,tmp);",names.class_name_lower);
	printfnl("        return ERROR;");
	printfnl("    }");
	printfnl("    ");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_push_ptr(%s *self,%s *node)",names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    ASSERT(node);    ");
	printfnl("    %s_auto_resize(self);",names.class_name_lower);
	printfnl("    ASSERT(!%s_is_full(self));",names.class_name_lower);
	printfnl("    self->data[self->top] = node;");
	printfnl("    self->top++;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("%s * %s_pop_ptr(%s *self)",names.c_node_class_name,names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    if(%s_is_empty(self))",names.class_name_lower);
	printfnl("        return NULL;");
	printfnl("    self->top--;");
	printfnl("    return self->data[self->top];");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_pop(%s *self,%s *node)",names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    ASSERT(!%s_is_empty(self));    ",names.class_name_lower);
	printfnl("    self->top--;");
	printfnl("    %s_copy_node(self,node,self->data[self->top]);",names.class_name_lower);
	printfnl("    %s_del_node(self,self->data[self->top]);",names.class_name_lower);
	printfnl("    self->data[self->top] = NULL;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("int %s_get_len(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    return self->top;");
	printfnl("}");
	printfnl("");
	printfnl("int %s_search_pos(%s *self,%s *node)",names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    int i;");
	printfnl("    for(i=0;i<self->top;i++)");
	printfnl("    {");
	printfnl("        if(%s_comp_node(self,self->data[i],node) == 0)",names.class_name_lower);
	printfnl("            return i;");
	printfnl("    }");
	printfnl("    return -1;");
	printfnl("}");
	printfnl("");
	printfnl("%s * %s_search(%s *self,%s *node)",names.c_node_class_name,names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    int pos = %s_search_pos(self,node);",names.class_name_lower);
	printfnl("    if(pos >= 0 && pos < self->top)");
	printfnl("        return self->data[pos];;");
	printfnl("    return NULL;");
	printfnl("}");
	printfnl("%s * %s_get_top_ptr(%s *self)",names.c_node_class_name,names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    if(%s_is_empty(self))",names.class_name_lower);
	printfnl("        return NULL;");
	printfnl("    return self->data[self->top - 1];");
	printfnl("}");
	printfnl("status_t %s_del_top(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    if(%s_is_empty(self))",names.class_name_lower);
	printfnl("        return ERROR;");
	printfnl("    self->top--;");
	printfnl("    %s_del_node(self,self->data[self->top]);",names.class_name_lower);
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s_clear(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    while(%s_del_top(self));",names.class_name_lower);
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("%s * %s_get_elem(%s *self,int index)",names.c_node_class_name,names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    if(index < 0 || index >= self->top)");
	printfnl("        return NULL;");
	printfnl("    return self->data[index];");
	printfnl("}");
	printfnl("");
	printfnl("%s * %s_bsearch_node(%s *self,%s *node,int order)",names.c_node_class_name,names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    return %s_get_elem(self,%s_bsearch(self,node,order));",names.class_name_lower,names.class_name_lower);
	printfnl("}");
	printfnl("int %s_bsearch(%s *self,%s *node,int order)",names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    int find,pos;");
	printfnl("    pos = %s_bsearch_pos(self,node,order,&find);",names.class_name_lower);
	printfnl("    if(find) return pos;");
	printfnl("    return -1;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_insert_elem_ptr(%s *self,int i, %s *node)",names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    int k;");
	printfnl("");
	printfnl("    ASSERT(node);");
	printfnl("    ASSERT(i >= 0 && i <= self->top);");
	printfnl("");
	printfnl("    %s_auto_resize(self);",names.class_name_lower);
	printfnl("    ASSERT(!%s_is_full(self));",names.class_name_lower);
	printfnl("    for(k = self->top; k > i; k--)");
	printfnl("    {");
	printfnl("        self->data[k] = self->data[k - 1];");
	printfnl("    }");
	printfnl("    self->data[i] = node;");
	printfnl("    self->top++;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_insert_elem(%s *self,int i, %s *node)",names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    %s *tmp;",names.c_node_class_name);
	printfnl("    ASSERT(node);");
	printfnl("    tmp = %s_clone_node(self,node);",names.class_name_lower);
	printfnl("    if(!%s_insert_elem_ptr(self,i,tmp))",names.class_name_lower);
	printfnl("    {");
	printfnl("        %s_del_node(self,tmp);",names.class_name_lower);
	printfnl("        return ERROR;");
	printfnl("    }");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("%s * %s_remove_elem(%s *self,int index)",names.c_node_class_name,names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    int k;");
	printfnl("    %s *p;",names.c_node_class_name);
	printfnl("    ");
	printfnl("    ASSERT(index >= 0 && index < self->top);");
	printfnl("    p = %s_get_elem(self,index);",names.class_name_lower);
	printfnl("");
	printfnl("    for(k = index; k < self->top-1; k++)");
	printfnl("    {");
	printfnl("        self->data[k] = self->data[k + 1];");
	printfnl("    }");
	printfnl("    self->top --;");
	printfnl("    self->data[self->top] = NULL;");
	printfnl("    return p;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_del_elem(%s *self,int i)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    %s *p = %s_remove_elem(self,i);",names.c_node_class_name,names.class_name_lower);
	printfnl("    if(p != NULL)");
	printfnl("    {");
	printfnl("        %s_del_node(self,p);",names.class_name_lower);
	printfnl("        return OK;");
	printfnl("    }");
	printfnl("    return ERROR;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_insert_ordered_ptr(%s *self,%s *node, int order,int unique)",names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    int pos,find;");
	printfnl("    pos = %s_bsearch_pos(self,node,order,&find);",names.class_name_lower);
	printfnl("    if(find && unique)");
	printfnl("        return ERROR;");
	printfnl("    return %s_insert_elem_ptr(self,pos,node);",names.class_name_lower);
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_insert_ordered(%s *self,%s *node, int order,int unique)",names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    int pos,find;");
	printfnl("    ASSERT(node);");
	printfnl("    pos = %s_bsearch_pos(self,node,order,&find);",names.class_name_lower);
	printfnl("    if(find && unique)");
	printfnl("        return ERROR;");
	printfnl("    return %s_insert_elem(self,pos,node);",names.class_name_lower);
	printfnl("}");
	printfnl("");
	printfnl("int %s_bsearch_pos(%s *self,%s *node, int order, int *find_flag)",names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    int low,high,mid,comp;");
	printfnl("    ");
	printfnl("    low = 0; ");
	printfnl("    high = %s_get_len(self) - 1;",names.class_name_lower);
	printfnl("");
	printfnl("    while(low<=high)");
	printfnl("    {");
	printfnl("        mid = (low+high) >> 1;");
	printfnl("");
	printfnl("        comp = %s_comp_node(self,self->data[mid],node);",names.class_name_lower);
	printfnl("        if(comp == 0)");
	printfnl("        {");
	printfnl("            *find_flag = TRUE;");
	printfnl("            return mid;");
	printfnl("        }");
	printfnl("    ");
	printfnl("        if(order != 0) comp = -comp;");
	printfnl("        if(comp>0)high=mid-1;else low=mid+1;");
	printfnl("    }");
	printfnl("    *find_flag = FALSE;");
	printfnl("    return low;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_sort(%s *self,int order)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    int i,len;");
	printfnl("    %s tmp;",names.c_class_name);
	printfnl("");
	printfnl("    len = %s_get_len(self);",names.class_name_lower);
	printfnl("    %s_init(&tmp,len);",names.class_name_lower);
	printfnl("");
	printfnl("    for(i = 0; i < len; i++)");
	printfnl("    {");
	printfnl("        %s_push_ptr(&tmp,%s_get_elem(self,i));",names.class_name_lower,names.class_name_lower);
	printfnl("    }");
	printfnl("");
	printfnl("    self->top = 0;");
	printfnl("    for(i = 0; i < len; i++)");
	printfnl("    {");
	printfnl("        %s_insert_ordered_ptr(self,%s_pop_ptr(&tmp),order,0);",names.class_name_lower,names.class_name_lower);
	printfnl("    }");
	printfnl("    ");
	printfnl("    for(i = 0; i < len; i++)");
	printfnl("    {");
	printfnl("        tmp.data[i] = NULL;");
	printfnl("    }");
	printfnl("    ");
	printfnl("    %s_destroy(&tmp);",names.class_name_lower);
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s_copy(%s *self,%s *stk)",names.class_name_lower,names.c_class_name,names.c_class_name);
	printfnl("{");
	printfnl("    int i;");
	printfnl("    ASSERT(stk);");
	printfnl("    %s_destroy(self);",names.class_name_lower);
	printfnl("    %s_init(self,%s_get_len(stk));",names.class_name_lower,names.class_name_lower);
	printfnl("    for(i = 0; i < %s_get_len(stk); i++)",names.class_name_lower);
	printfnl("    {");
	printfnl("        %s *p = %s_get_elem(stk,i);",names.c_node_class_name,names.class_name_lower);
	printfnl("        ASSERT(p);");
	printfnl("        %s_push(self,p);",names.class_name_lower);
	printfnl("    }");
	printfnl("    return OK;");
	printfnl("}");

	printfnl("status_t %s_print(%s *self,struct log_buffer *buf)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    int i;");
	printfnl("");
	printfnl("    for(i = 0; i <self->top; i++)");
	printfnl("    {");
	printfnl("        if(self->data[i])");
	printfnl("        {");
	printfnl("            log_buffer_log(buf,\"[%%d]={\\r\\n\",i);");
	printfnl("            log_buffer_inc_level(buf,1);");
	printfnl("            %s_print(self->data[i],buf);",names.node_class_name_lower);
	printfnl("            log_buffer_inc_level(buf,-1);");
	printfnl("            log_buffer_log(buf,\"}\\r\\n\");");
	printfnl("        }");
	printfnl("    }");
	printfnl("    log_buffer_log(buf,\"size=%%d\\r\\n\",self->size);");
	printfnl("    log_buffer_log(buf,\"top=%%d\\r\\n\",self->top);");
	printfnl("    return OK;");
	printfnl("}");

	printfnl("/////////////////////////////////////////////////////////////////////////////////////");
	printfnl("/////////////////////////////////////////////////////////////////////////////////////");
	printfnl("status_t %s_copy_node(%s *self,%s *dst, %s *src)",names.class_name_lower,names.c_class_name,names.c_node_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    return %s_copy(dst,src);",names.node_class_name_lower);
	printfnl("}");
	printfnl("");
	printfnl("%s * %s_clone_node(%s *self,%s *node)",names.c_node_class_name,names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    %s *tmp;",names.c_node_class_name);
	printfnl("    X_MALLOC(tmp,%s,1);",names.c_node_class_name);
	printfnl("    %s_init(tmp);",names.node_class_name_lower);
	printfnl("    %s_copy(tmp,node);",names.node_class_name_lower);
	printfnl("    return tmp;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_del_node(%s *self,%s *node)",names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    %s_destroy(node);",names.node_class_name_lower);
	printfnl("    X_FREE(node);");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("int %s_comp_node(%s *self,%s *node1, %s *node2)",names.class_name_lower,names.c_class_name,names.c_node_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    ASSERT(node1 && node2);");
	printfnl("    return %s_comp(node1,node2);",names.node_class_name_lower);
	printfnl("}");

end
