require("common")

function code_basic_cpp(names)
	printfnl("#include \"%s.h\"",to_file_name(names.class_name));
	printfnl("#include \"mem_tool.h\"");
	printfnl("#include \"syslog.h\"");
	printfnl("");
	printfnl("int %s_comp_node(%s *self,double node1, double node2);",names.class_name_lower,names.c_class_name);
	printfnl("");
	printfnl("status_t %s_init_basic(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    self->data = NULL;");
	printfnl("    self->top = 0;");
	printfnl("    self->size = 0;        ");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s_init(%s *self,int init_size)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    %s_init_basic(self);",names.class_name_lower);
	printfnl("    X_MALLOC(self->data,double,init_size);");
	printfnl("    self->size = init_size;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s_destroy(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    if(self == NULL)return ERROR;");
	printfnl("    X_FREE(self->data);");
	printfnl("    %s_init_basic(self);",names.class_name_lower);
	printfnl("    return OK;");
	printfnl("}");
	printfnl("bool_t %s_is_empty(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    return self->top <= 0;");
	printfnl("}");
	printfnl("bool_t %s_is_full(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    return self->top >= self->size;");
	printfnl("}");
	printfnl("int %s_get_len(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    return self->top;");
	printfnl("}");
	printfnl("status_t %s_clear(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{    ");
	printfnl("    self->top = 0;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s_auto_resize(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    if(%s_is_full(self))",names.class_name_lower);
	printfnl("    {");
	printfnl("        X_REALLOC(self->data,double,self->size,self->size * 2);");
	printfnl("        self->size *= 2;");
	printfnl("    }");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_push(%s *self,double node)",names.class_name_lower,names.c_class_name);
	printfnl("{    ");
	printfnl("    %s_auto_resize(self);",names.class_name_lower);
	printfnl("    ASSERT(!%s_is_full(self));",names.class_name_lower);
	printfnl("    self->data[self->top]= node;");
	printfnl("    self->top ++;    ");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("double %s_pop(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    ASSERT(!%s_is_empty(self));",names.class_name_lower);
	printfnl("    self->top --;");
	printfnl("    return self->data[self->top];");
	printfnl("}");
	printfnl("");
	printfnl("double %s_get_elem(%s *self,int index)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    ASSERT(index >= 0 && index < self->top);");
	printfnl("    return self->data[index];");
	printfnl("}");
	printfnl("");
	printfnl("int %s_bsearch_pos(%s *self,double node, int order, int *find_flag)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    int low,high,mid;");
	printfnl("    int comp;");
	printfnl("");
	printfnl("    low = 0; high=%s_get_len(self) - 1;",names.class_name_lower);
	printfnl("    while(low<=high)");
	printfnl("    {");
	printfnl("        mid = (low+high) >> 1;");
	printfnl("        comp = %s_comp_node(self,self->data[mid],node);",names.class_name_lower);
	printfnl("        if(comp == 0)");
	printfnl("        {");
	printfnl("            *find_flag = TRUE;");
	printfnl("            return mid;");
	printfnl("        }");
	printfnl("");
	printfnl("        if(order != 0) comp = -comp;");
	printfnl("        if(comp>0)high=mid-1;else low=mid+1;");
	printfnl("    }");
	printfnl("    *find_flag = FALSE;");
	printfnl("    return low;");
	printfnl("}");
	printfnl("status_t %s_insert_elem(%s *self,int index, double node)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    int k;");
	printfnl("    ASSERT(index >= 0 && index <= self->top);    ");
	printfnl("    %s_auto_resize(self);",names.class_name_lower);
	printfnl("    ASSERT(!%s_is_full(self));",names.class_name_lower);
	printfnl("    for(k = self->top; k > index; k--)");
	printfnl("    {");
	printfnl("        self->data[k] = self->data[k - 1];");
	printfnl("    }");
	printfnl("    self->data[index] = node;");
	printfnl("    self->top++;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s_del_elem(%s *self,int index)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    int k;");
	printfnl("    ASSERT(index >= 0 && index < self->top);");
	printfnl("    for(k = index; k < self->top-1; k++)");
	printfnl("    {");
	printfnl("        self->data[k] = self->data[k + 1];");
	printfnl("    }");
	printfnl("    self->top --;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s_insert_ordered(%s *self,double node, int order, int unique)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    int pos,find;");
	printfnl("    ");
	printfnl("    pos = %s_bsearch_pos(self,node,order,&find);",names.class_name_lower);
	printfnl("    if(find && unique)");
	printfnl("        return ERROR;");
	printfnl("    ");
	printfnl("    return %s_insert_elem(self,pos,node);",names.class_name_lower);
	printfnl("}");
	printfnl("int %s_search_pos(%s *self,double node)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    int i;");
	printfnl("    for(i=0;i<self->top;i++)");
	printfnl("    {");
	printfnl("        if(%s_comp_node(self,self->data[i],node) == 0)",names.class_name_lower);
	printfnl("            return i;");
	printfnl("    }");
	printfnl("    return -1;");
	printfnl("}");
	printfnl("double %s_get_top(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    ASSERT(!%s_is_empty(self));",names.class_name_lower);
	printfnl("    return self->data[self->top - 1];");
	printfnl("}");
	printfnl("status_t %s_set_elem(%s *self,int index, double node)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    ASSERT(index >= 0 && index < self->top);");
	printfnl("    self->data[index] = node;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s_sort(%s *self,int order)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    int i;");
	printfnl("    %s tmp;",names.c_class_name);
	printfnl("");
	printfnl("    %s_init(&tmp,%s_get_len(self));",names.class_name_lower,names.class_name_lower);
	printfnl("    for(i = 0; i < %s_get_len(self); i++)",names.class_name_lower);
	printfnl("    {");
	printfnl("        %s_push(&tmp,%s_get_elem(self,i));",names.class_name_lower,names.class_name_lower);
	printfnl("    }");
	printfnl("    ");
	printfnl("    self->top = 0;");
	printfnl("    for(i = 0; i < %s_get_len(&tmp); i++)",names.class_name_lower);
	printfnl("    {");
	printfnl("        %s_insert_ordered(self,%s_get_elem(&tmp,i),order,0);",names.class_name_lower,names.class_name_lower);
	printfnl("    }");
	printfnl("    %s_destroy(&tmp);",names.class_name_lower);
	printfnl("");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s_copy(%s *self,%s *stk)",names.class_name_lower,names.c_class_name,names.c_class_name);
	printfnl("{");
	printfnl("    int i;");
	printfnl("    ASSERT(stk);");
	printfnl("    %s_destroy(self);",names.class_name_lower);
	printfnl("    %s_init(self,%s_get_len(stk));",names.class_name_lower,names.class_name_lower);
	printfnl("    for(i = 0; i < %s_get_len(stk); i++)",names.class_name_lower);
	printfnl("    {");
	printfnl("        %s_push(self,%s_get_elem(stk,i));",names.class_name_lower,names.class_name_lower);
	printfnl("    }");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("/***************************************************/");

	printfnl("status_t %s_print(%s *self,struct log_buffer *buf)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    int i;");
	printfnl("    for(i = 0; i< self->top; i++)");
	printfnl("    {");
	printfnl("        //print your element");
	printfnl("    }");
	printfnl("    return TRUE;");
	printfnl("}");

	printfnl("");
	printfnl("int %s_comp_node(%s *self,double node1, double node2)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    if(node1 > node2) return 1;");
	printfnl("    if(node1 < node2) return -1;");
	printfnl("    return 0;");
	printfnl("}");

end
