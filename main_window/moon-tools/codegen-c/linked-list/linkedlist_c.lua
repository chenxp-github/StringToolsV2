function code_cpp(names)
	printfnl("#include \"%s.h\"",names.class_name_lower);
	
	common_include_c();
	
	printfnl("");
	printfnl("status_t %s_init(%s *self)",names.entry_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    self->next = NULL;");
	printfnl("    self->raw_ptr = NULL;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_destroy(%s *self)",names.entry_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    %s_destroy(self->raw_ptr);",names.node_class_name_lower);
	printfnl("    X_FREE(self->raw_ptr);");
	printfnl("    self->next = NULL;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_set(%s *self, %s *node)",names.entry_class_name,names.c_entry_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    ASSERT(self->raw_ptr == NULL);");
	printfnl("    self->raw_ptr = node;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("%s* %s_get(%s *self)",names.c_node_class_name,names.entry_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    return self->raw_ptr;");
	printfnl("}");
	printfnl("/********************************************************************/");
	printfnl("%s* %s_clone_node(%s *self,%s *node);",names.c_node_class_name,names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("int %s_comp_node(%s *self,%s *node1, %s *node2);",names.class_name_lower,names.c_class_name,names.c_node_class_name,names.c_node_class_name);
	printfnl("");
	printfnl("status_t %s_init_basic(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    self->head = NULL;");
	printfnl("    self->tail = NULL;");
	printfnl("    self->len = 0;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s_init(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    %s_init_basic(self);",names.class_name_lower);
	printfnl("    //add your code");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s_destroy(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    %s *q,*p = self->head;",names.c_entry_class_name);
	printfnl("    while(p)");
	printfnl("    {");
	printfnl("        q = p;");
	printfnl("        p = p->next;");
	printfnl("        %s_del_entry(self,q);",names.class_name_lower);
	printfnl("    }");
	printfnl("    %s_init_basic(self);",names.class_name_lower);
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_add_from_head(%s *self,%s *node)",names.class_name_lower,names.c_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    ASSERT(node);");
	printfnl("    if(self->head)");
	printfnl("        self->head->prev = node;");
	printfnl("    node->next = self->head;");
	printfnl("    self->head = node;");
	printfnl("    if(self->tail == NULL)");
	printfnl("        self->tail = node;");
	printfnl("    self->len++;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("status_t %s_add_from_tail(%s *self,%s *node)",names.class_name_lower,names.c_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    ASSERT(node);");
	printfnl("    if(self->tail)");
	printfnl("        self->tail->next = node;");
	printfnl("    node->prev = self->tail;");
	printfnl("    self->tail = node;");
	printfnl("    if(self->head == NULL)");
	printfnl("        self->head = node;");
	printfnl("    self->len++;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("bool_t %s_is_empty(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    return self->head == NULL && self->tail == NULL;");
	printfnl("}");
	printfnl("");
	printfnl("%s* %s_search_from_head(%s *self,%s *node)",names.c_entry_class_name,names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    %s *p = self->head;",names.c_entry_class_name);
	printfnl("    while(p)");
	printfnl("    {");
	printfnl("        if(%s_comp_node(self,%s_get(p),node) == 0)",names.class_name_lower,names.entry_class_name);
	printfnl("        {");
	printfnl("            return p;");
	printfnl("        }");
	printfnl("        p = p->next;");
	printfnl("    }");
	printfnl("    return NULL;");
	printfnl("}");
	printfnl("");
	printfnl("%s* %s_search_from_tail(%s *self,%s *node)",names.c_entry_class_name,names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    %s *p = self->tail;",names.c_entry_class_name);
	printfnl("    while(p)");
	printfnl("    {");
	printfnl("        if(%s_comp_node(self,%s_get(p),node) == 0)",names.class_name_lower,names.entry_class_name);
	printfnl("            return p;");
	printfnl("        p = p->prev;");
	printfnl("    }");
	printfnl("    return NULL;    ");
	printfnl("}");
	printfnl("");
	printfnl("%s* %s_remove(%s *self,%s *node)",names.c_entry_class_name,names.class_name_lower,names.c_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    ASSERT(node);");
	printfnl("");
	printfnl("    if(node->prev)");
	printfnl("        node->prev->next = node->next;");
	printfnl("    else");
	printfnl("        self->head = node->next;");
	printfnl("");
	printfnl("    if(node->next)");
	printfnl("        node->next->prev = node->prev;");
	printfnl("    else");
	printfnl("        self->tail = node->prev;");
	printfnl("");
	printfnl("    self->len--;");
	printfnl("    node->prev = NULL;");
	printfnl("    node->next = NULL;");
	printfnl("    return node;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_delete(%s *self,%s *node)",names.class_name_lower,names.c_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    return %s_del_entry(self,%s_remove(self,node));",names.class_name_lower,names.class_name_lower);
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_insert_after(%s *self,%s *after, %s *node)",names.class_name_lower,names.c_class_name,names.c_entry_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    ASSERT(node && after);");
	printfnl("    node->next = after->next;");
	printfnl("    if(after->next)");
	printfnl("        after->next->prev = node;");
	printfnl("    node->prev = after;");
	printfnl("    after->next = node;");
	printfnl("    if(after == self->tail)");
	printfnl("        self->tail = node;");
	printfnl("    self->len++;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("status_t %s_insert_before(%s *self,%s *before, %s *node)",names.class_name_lower,names.c_class_name,names.c_entry_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    ASSERT(node && before);");
	printfnl("    node->prev = before->prev;");
	printfnl("    if(before->prev)");
	printfnl("        before->prev->next = node;");
	printfnl("    node->next = before;");
	printfnl("    before->prev = node;");
	printfnl("    if(before == self->head)");
	printfnl("        self->head = node;");
	printfnl("    self->len++;");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("%s* %s_get_head(%s *self)",names.c_entry_class_name,names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    return self->head;");
	printfnl("}");
	printfnl("");
	printfnl("%s* %s_get_tail(%s *self)",names.c_entry_class_name,names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    return self->tail;");
	printfnl("}");
	printfnl("");
	printfnl("int %s_get_len(%s *self)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    return self->len;");
	printfnl("}");
	printfnl("status_t %s_copy(%s *self,%s *_list)",names.class_name_lower,names.c_class_name,names.c_class_name);
	printfnl("{");
	printfnl("    %s *p;",names.c_entry_class_name);
	printfnl("    ");
	printfnl("    ASSERT(_list);");
	printfnl("    ");
	printfnl("    %s_destroy(self);",names.class_name_lower);
	printfnl("    %s_init(self);",names.class_name_lower);
	printfnl("    ");
	printfnl("    p = _list->head;");
	printfnl("    while(p)");
	printfnl("    {");
	printfnl("        %s *node = %s_clone_node(self,",names.c_node_class_name,names.class_name_lower);
	printfnl("            %s_get(p));",names.entry_class_name);
	printfnl("        %s *entry;",names.c_entry_class_name);
	printfnl("        X_MALLOC(entry,%s,1);",names.c_entry_class_name);
	printfnl("        %s_set(entry,node);",names.entry_class_name);
	printfnl("");
	printfnl("        if(!%s_add_from_tail(self,entry))",names.class_name_lower);
	printfnl("        {");
	printfnl("            %s_del_entry(self,entry);",names.class_name_lower);
	printfnl("            return ERROR;");
	printfnl("        }");
	printfnl("        p = p->next;");
	printfnl("    }");
	printfnl("    ");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("");
	printfnl("");
	printfnl("status_t %s_print(%s *self,struct log_buffer *buf)",names.class_name_lower,names.c_class_name);
	printfnl("{");
	printfnl("    %s *p;",names.c_entry_class_name);
	printfnl("    p = self->head;");
	printfnl("    while(p)");
	printfnl("    {");
	printfnl("        log_buffer_log(buf,\"{\");");
	printfnl("        log_buffer_inc_level(buf,1);");
	printfnl("        %s_print(%s_get(p),buf);",names.node_class_name_lower,names.entry_class_name);
	printfnl("        log_buffer_inc_level(buf,-1);");
	printfnl("        log_buffer_log(buf,\"}->\");");
	printfnl("        p = p->next;");
	printfnl("    }");
	printfnl("    log_buffer_log(buf,\"len = %%d\",self->len);");
	printfnl("    return OK;");
	printfnl("}");

	printfnl("");
	printfnl("status_t %s_del_entry(%s *self,%s *entry)",names.class_name_lower,names.c_class_name,names.c_entry_class_name);
	printfnl("{");
	printfnl("    if(entry == NULL)return ERROR;");
	printfnl("    %s_destroy(entry);",names.entry_class_name);
	printfnl("    X_FREE(entry);");
	printfnl("    return OK;");
	printfnl("}");
	printfnl("/*************************************************/");
	printfnl("int %s_comp_node(%s *self,%s *node1, %s *node2)",names.class_name_lower,names.c_class_name,names.c_node_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    ASSERT(node1 && node2);");
	printfnl("    return %s_comp(node1,node2);",names.node_class_name_lower);
	printfnl("}");
	printfnl("");
	printfnl("%s* %s_clone_node(%s *self,%s *node)",names.c_node_class_name,names.class_name_lower,names.c_class_name,names.c_node_class_name);
	printfnl("{");
	printfnl("    %s *tmp;",names.c_node_class_name);
	printfnl("    ASSERT(node);");
	printfnl("");
	printfnl("    X_MALLOC(tmp,%s,1);",names.c_node_class_name);
	printfnl("    %s_init(tmp);",names.node_class_name_lower);
	printfnl("    %s_copy(tmp,node);",names.node_class_name_lower);
	printfnl("");
	printfnl("    return tmp;");
	printfnl("}");
	printfnl("");
end