class IndexTreeNode{
    string Name;
    HTREEITEM TreeItemHandle;
    string Path;
}

class IndexTree{
    IndexTreeNode Root;
}

class PrintBuffer{
	Mutex Mutex;
	int PrintPosition;
	int DataPosition;	
	char TextData;
}

class App{
    [static] Mem LoadText();
    [static] status_t ClearBuffer();
    [static] status_t SaveBuffer(string filename);
    [static] status_t SetBufferFlushInterval(int interval);	
    [static] void WaitBuffer();
    [static] string GetSelfPath(string rpath);
    [static] string Md5Sum(FileBase file);
	[static] status_t Base64Encode(FileBase infile, FileBase outfile);
    [static] status_t SwitchToPageText();
    [static] status_t SwitchToPageImage();
    [static] status_t DumpFile(FileBase file);
	[static] status_t QuitTask(int taskid);
    
    [static] status_t SetStatusText(int part, string text);
    [static] string GetCurLine();
	
	[static] uint32_t GetHWnd(int type);	
	
	[static] void ShowEmbeddedUIWindow(int height);
	[static] void HideEmbeddedUIWindow();
	
	[callback] void OnAppEvent(int event, Mem mem);
	[static] void SetOnAppEvent([callback] OnAppEvent);
	[static] int GetBufferSize();
    [static] bool UserStopped();
}


class IdlParser{
	string GetUncertainError();
	string GetCertainError();
	bool HasErrors();
	string ParseAll();
	status_t LoadSourceFromString(string str);
    status_t LoadSourceFromFile(FileBase file);
    status_t LoadSourceFromFile(string filename);
}

class Screen{
    xImage ImageBuffer;
    
    static int GetWidth();
    static int GetHeight();
    static XImage GetBackImage();
    static status_t Redraw();
    static status_t Resize(int w, int h);
    static status_t Create(int w, int h);
    static status_t LoadImage(FileBase file);
    static status_t LoadImage(string filename);
    static status_t Clear(uint32_t color);
    static void Resample(int neww, int newh);   
    static int GetViewWidth();
    static int GetViewHeight();
    
    static void DrawImage(xImage img, int offx, int offy, int op, bool mix_alpha);    
}

class PageImage:Page{
}

class xImageHelper{
    static float CalcuSimilarity(xImage img1, xImage img2, int threshold, xImage diff_img);
}

class ServerSidePeer{
    status_t ClearSendingQueue();
    int GetSendingQueueLength();
    status_t ResumeFetchMessageTask();
    status_t SuspendFetchMessageTask();
    status_t StartFetchMessageTask();
    status_t SetCanFetchMessage(bool can);
    status_t Connect(string peer_name);
    status_t Start();
    string GetName();
    status_t SetName(string _name);
    bool IsMarkQuit();    
    status_t Destroy();
}

class MiniBson{
	status_t PutBinary(string name, FileBase binary);
	status_t GetBinary(string name, Mem binary);
}

class WebSocketMessage{
	void WebSocketMessage();
	status_t TransferData(Mem from);
	int GetMessageType();
	status_t SetMessageType(int _type);
	status_t AttachPayload(Mem payload);
	int HeaderSize();
	int Size();
	status_t DeserializeHeader(FileBase file);
	status_t SerializeHeader(FileBase file);

    status_t Copy(WebSocketMessage _p);

    int GetMethod();
    int GetCallbackId();
    int GetDataType();
    Mem GetData();
    status_t SetMethod(int _method);
    status_t SetCallbackId(int _callbackid);
    status_t SetDataType(int _type);
    status_t SetData(Mem _data);
}

class WebSocketServer{
	void WebSocketServer();
	bool IsConnected();
	status_t SendMessage(WebSocketMessage msg);	
    status_t OnNewClientArrive(TcpSocket socket,bool clear);
    status_t InitBasic();
    status_t Destroy();
    [callback] void OnMessage(Mem payload);
    status_t SetOnMessage(int func);
}

class TcpSocket : public FileBase
{
	void TcpSocket();
    int32_t GetSocketFd();
    [static] bool IsIpAddress(Mem str);
    bool CanRead();
    bool CanWrite();
    status_t TransferSocketFd(TcpSocket from);
    status_t AttachSocketFd(int32_t fd);
    [static] status_t GetAllIP(FileBase file);
    bool IsConnected();
    status_t Init();
    status_t Destroy();
	
	[static] int NewTcpAcceptor(int listen_port, int callback);
	[callback] void OnTcpAcceptorEvent(int event, TcpSocket tcp_socket);	
	
	[callback] void OnTcpConnectorEvent(int event, TcpSocket tcp_socket);
	[static] int NewTcpConnector(string server, int port,[callback] OnTcpConnectorEvent);
	
}


class UdpSocket{
	void UdpSocket();
	status_t Init();
	status_t Destroy();

	status_t Create();	
	status_t Bind(int port);
	status_t SetDestIpAndPort(string ip, int port);
	status_t SendMsg(Mem data);
	status_t RecvMsg(Mem data);
	string,int GetSrcAddr();
}

class LuaHdc{
    status_t Destroy();
}

class Win32{    
    [callback] void OnWindowMessage(uint32_t hwnd, uint32_t msg, uint32_t wparam, uint32_t lparam);
    [static] void SetOnWindowMessage([callback] on_msg);    
    [static] int GetAsyncKeyState(int vk);
    [static] (int left, int top, int right, int bottom) GetClientRect(HWND hwnd);
    
    [static] int,int GetCursorPos();
    [static] bool SetCursorPos(int x, int y);
    [static] HWND GetDesktopWindow();   
    [static] LuaHdc GetDC(HWND hwnd);
    [static] uint32_t GetPixel(LuaHdc hdc, int x, int y);
	[static] uint32_t SendMessage(HWND hwnd, uint32_t message, uint32_t wparam, uint32_t lparam);
	[static] status_t BitBlt(LuaHdc hdc,int x,int y,int width,int height,LuaHdc hdc_src,int left,int top,uint32_t op);
	[static] array<int> GetWindowRect(HWND hwnd);
    [static] status_t SetFocus(HWND hwnd);
}   

class LuaWindowBase{
    status_t Destroy();
    status_t AttachWnd(HWND hwnd);
    status_t SetText(string str);
    status_t GetText(Mem text);
    status_t MoveWindow(int32_t x, int32_t y, int32_t w, int32_t h);
    status_t Show();
    status_t Hide();
    int GetTextLen();
    status_t SetParent(HWND hp);
    status_t GetWidth();
    status_t GetHeight();
    status_t SetStockFont(int32_t stock_font);
    uint32_t GetStyle();
    uint32_t GetExStyle();
    bool IsVisible();
    status_t SetStyle(uint32_t style);
    status_t AddStyle(uint32_t style);
    status_t RemoveStyle(uint32_t style);
    status_t SetExStyle(uint32_t ex_style);
    status_t AddExStyle(uint32_t ex_style);
    HWND GetParent();
    
    bool IsMyCommand(uint32_t wparam);
    bool IsMyNotify(uint32_t lparam);
    uint32_t GetNotifyCode(uint32_t lparam);
    uint32_t GetCommandCode(uint32_t wparam);
    
    HWND GetHWnd();
  
}

class LuaButton:LuaWindowBase{
    void LuaButton();
    status_t Create();
}

class LuaEditBox:LuaWindowBase{
    void LuaEditBox();
    status_t Create();
    status_t SetMaxText(int max);
}

class IdlHint{
    uint32_t Flags;
    MemStk Hints;
}

class FileBase{
    string NextWord();
    string NextString();
    string NextLine();
}


class FileManager{
	[static] status_t EncodingConvert(int from, int to, FileBase inFile, FileBase outFile);
}

class MemDC{
	void MemDC();
    status_t DrawRect(array<int> r,uint32_t color);
    status_t CreateBitmap(int w,int h,int bits);
    status_t LoadBitMap(FileBase file);
    status_t SaveBmp(FileBase file,int bits);
    status_t SetBrush(uint32_t style,uint32_t color,uint32_t hatch);
    status_t UpdateParent();
    status_t SetTransparentBkMode();
    status_t AttachDC(LuaHdc hdc);
    uint32_t GetPixel(int x,int y);
    status_t SetStockFont(int fnObject);
    status_t SetTextColor(uint32_t color);
    status_t SetTextBkColor(uint32_t color);
    status_t SetPen(int fnPenStyle,int nWidth,uint32_t crColor);
    status_t SetHatchBrush(int fnStyle,uint32_t clrref);
    status_t SetSolidBrush(uint32_t clrref);
    status_t TextOut(int x,int y,string str);
    status_t TextOutEx(int x,int y, array<int> r,string str);
    status_t FillRect(int l,int t,int w,int h);
    status_t DrawRect(uint32_t color);
    status_t DrawRect(int l,int t,int w,int h,uint32_t color);
    status_t DrawRect(int l,int t,int w,int h);
    status_t LineTo(int x,int y);
    status_t Ellipse(int l,int t,int r,int b);
    status_t Arc(int nLeftRect,int nTopRect,int nRightRect,int nBottomRect,int nXRadial1,int nYRadial1,int nXRadial2,int nYRadial2);
    status_t MoveTo(int x,int y);
    status_t DrawToScreen();
    status_t Clear();
    status_t StretchToDC(LuaHdc hdc_des,int width,int height);
    status_t SetWindowPosX(int x);
    status_t SetWindowPosY(int y);
    status_t SetPixel(int x,int y,uint32_t color);
    status_t Copy(LuaHdc hdc_src);
    status_t Paste(LuaHdc hdc_des);
    status_t SetParent(HWND hp);
    status_t SetPos(int l,int t);
    status_t CreateCompatibleDC(LuaHdc hdc);
	status_t DrawText(string str,array<int> r,uint32_t dwDTFormat);	
	int GetWidth();
	int GetHeight();
}


// xImageGIF.h: interface for the xImageGIF class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_XIMAGEGIF_H__86DE3AD3_049C_4864_AFFC_88794D9029DD__INCLUDED_)
#define AFX_XIMAGEGIF_H__86DE3AD3_049C_4864_AFFC_88794D9029DD__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "filebase.h"
#include "ximage.h"

typedef short int       code_int;   

#define OUT_OF_MEMORY -10
#define BAD_CODE_SIZE -20
#define READ_ERROR -1
#define WRITE_ERROR -2
#define OPEN_ERROR -3
#define CREATE_ERROR -4
#define MAX_CODES   4095
#define GIFBUFTAM 16383
#define TRANSPARENCY_CODE 0xF9

//LZW GIF Image compression
#define MAXBITSCODES    12
#define HSIZE  5003     / 80% occupancy /
#define MAXCODE(n_bits) (((code_int) 1 << (n_bits)) - 1)
#define HashTabOf(i)    htab[i]
#define CodeTabOf(i)    codetab[i]

class struct_gifgce{
public:
    BYTE flags;
    WORD delaytime;
    BYTE transpcolindex;
public:
    struct_gifgce();
    int Copy(struct_gifgce p);
    int InitBasic();
    int FromFile(FileBase pfile);
    int ToFile(FileBase pfile);
    static int Size();
};

class struct_dscgif{
public:
    char header[6];
    WORD scrwidth;
    WORD scrheight;
    char pflds;
    char bcindx;
    char pxasrat;
public:
    struct_dscgif();
    int Copy(struct_dscgif p);
    int InitBasic();
    int FromFile(FileBase pfile);
    int ToFile(FileBase pfile);
    static int Size();
};

class struct_image{
public:
    WORD l;
    WORD t;
    WORD w;
    WORD h;
    BYTE pf;
public:
    struct_image();
    int Copy(struct_image p);
    int InitBasic();
    int FromFile(FileBase pfile);
    int ToFile(FileBase pfile);
    static int Size();
};

class struct_TabCol{
public:
    short colres;
    short sogct;
    rgb_color paleta[256];
public:
    struct_TabCol();
    int Copy(struct_TabCol p);
    int InitBasic();
    int FromFile(FileBase pfile);
    int ToFile(FileBase pfile);
    static int Size();
};

class struct_RLE{
public:
    int rl_pixel;
    int rl_basecode;
    int rl_count;
    int rl_table_pixel;
    int rl_table_max;
    int just_cleared;
    int out_bits;
    int out_bits_init;
    int out_count;
    int out_bump;
    int out_bump_init;
    int out_clear;
    int out_clear_init;
    int max_ocodes;
    int code_clear;
    int code_eof;
    unsigned int obuf;
    int obits;
    unsigned char oblock[256];
    int oblen;
public:
    struct_RLE();
    int Copy(struct_RLE p);
    int InitBasic();
    int FromFile(FileBase pfile);
    int ToFile(FileBase pfile);
    static int Size();
};

class xImage{
 
    int DestroyAll();
    void SetTransColor(uint32_t rgba);
    uint32_t GetCodecOption(uint32_t imagetype);
    
    bool Threshold(uint8_t level);
    bool SplitRGB(xImage r,xImage g,xImage b);
    bool SplitCMYK(xImage c,xImage m,xImage y,xImage k);
    bool SplitYUV(xImage y,xImage u,xImage v);
    bool SplitYIQ(xImage y,xImage i,xImage q);
    bool SplitXYZ(xImage x,xImage y,xImage z);
    bool SplitHSL(xImage h,xImage s,xImage l);
    
    void HuePalette(float correction);
    bool Colorize(uint8_t hue, uint8_t sat, float blend);
    bool Light(int32_t brightness, int32_t contrast);
    
    float Mean();
    bool Filter(int32_t kernel, int32_t Ksize, int32_t Kfactor, int32_t Koffset);
    bool Erode(int32_t Ksize);
    bool Dilate(int32_t Ksize);
    bool Edge(int32_t Ksize);
    void Mix(xImage imgsrc2, int op, int32_t lXOffset, int32_t lYOffset, bool bMixAlpha);
    void MixFrom(xImage imagesrc2, int32_t lXOffset, int32_t lYOffset);
    bool ShiftRGB(int32_t r, int32_t g, int32_t b);
    bool Gamma(float gamma);
    bool GammaRGB(float gammaR, float gammaG, float gammaB);
    bool Median(int32_t Ksize);
    bool Noise(int32_t level);
    bool FFT2(xImage srcReal, xImage srcImag, xImage dstReal, xImage dstImag,
        int32_t direction, bool bForceFFT, bool bMagnitude);
    bool FFT(int dir,int m,double x,double y);
    bool DFT(int dir,int32_t m,double x1,double y1,double x2,double y2);
    bool Combine(xImage r,xImage g,xImage b,xImage a, int32_t colorspace);
    bool Repair(float radius, int32_t niterations, int32_t colorspace);
    bool RepairChannel(xImage ch, float radius);
    bool Contour();
    bool Jitter(int32_t radius);
    bool TextBlur(uint8_t threshold, uint8_t decay, uint8_t max_depth, bool bBlurHorizontal, bool bBlurVertical, xImage iDst);
    bool GaussianBlur(float radius , xImage iDst);
    bool SelectiveBlur(float radius, uint8_t threshold, xImage iDst);
    bool UnsharpMask(float radius , float amount , int threshold );
    bool RedEyeRemove(float strength);
    bool Saturate( int32_t saturation,  int32_t colorspace);
    bool Solarize(uint8_t level, bool bLinkedChannels);
    bool ConvertColorSpace( int32_t dstColorSpace,  int32_t srcColorSpace);
    int  OptimalThreshold(int32_t method, int  pBox[], xImage pContrastMask);
    bool AdaptiveThreshold(int32_t method, int32_t nBoxSize, xImage pContrastMask, int32_t nBias, float fGlobalLocalBalance);

    bool QIShrink(int32_t newx, int32_t newy, xImage  iDst, bool bChangeBpp);
    bool CircleTransform(int type,int32_t rmax,float Koeff);
    bool Thumbnail(int32_t newx, int32_t newy, uint32_t canvascolor, xImage iDst);
    bool Expand(int32_t newx, int32_t newy, uint32_t canvascolor, xImage iDst);

    bool Skew(float xgain, float ygain, int32_t xpivot, int32_t ypivot, bool bEnableInterpolation);
    
    bool Crop(int r[], xImage iDst);
    
    bool CropRotatedRectangle( int32_t topx, int32_t topy, int32_t width, int32_t height, float angle, xImage iDst);
    bool Dither(int32_t method);
    bool IncreaseBpp(uint32_t nbit);
    bool DecreaseBpp(uint32_t nbit, bool errordiffusion, uint32_t clrimportant);
    bool Resample2(int32_t newx, int32_t newy, int inMethod, int ofMethod, xImage iDst, bool disableAveraging);
    bool Resample(int32_t newx, int32_t newy, int mode, xImage iDst);
    bool Resample(int32_t newx, int32_t newy);
    bool Rotate180(xImage iDst);

    uint32_t GetPixelColorInterpolated(
        float x,float y, 
        int  inMethod, 
        int  ofMethod);
    
    uint32_t GetAreaColorInterpolated(
        float  xc, float  yc, float  w, float  h, 
        int  inMethod, 
        int  ofMethod);

    uint32_t GetPixelColorWithOverflow(int32_t x, int32_t y, int  ofMethod);
    float KernelBSpline( float x);
    float KernelLinear( float t);
    float KernelCubic( float t);
    float KernelGeneralizedCubic( float t,  float a);
    float KernelLanczosSinc( float t,  float r);
    float KernelBox( float x);
    float KernelHermite( float x);
    float KernelHanning( float x);
    float KernelHamming( float x);
    float KernelSinc( float x);
    float KernelBlackman( float x);
    float KernelBessel_J1( float x);
    float KernelBessel_P1( float x);
    float KernelBessel_Q1( float x);
    float KernelBessel_Order1(float x);
    float KernelBessel( float x);
    float KernelGaussian( float x);
    float KernelQuadratic( float x);
    float KernelMitchell( float x);
    float KernelCatrom( float x);
    float KernelPower( float x,  float a);

    bool Rotate2(float angle, xImage iDst, int inMethod, int ofMethod, bool  optimizeRightAngles,bool  bKeepOriginalSize);
    bool Rotate(float angle, xImage iDst);
    bool Negative();
    bool RotateRight(xImage iDst);
    bool RotateLeft(xImage iDst);
    bool Mirror(bool bMirrorSelection, bool bMirrorAlpha);
    bool Flip(bool bFlipSelection, bool bFlipAlpha);

    void LayerDeleteAll();
    bool LayerDelete(int32_t position);

    xImage  GetParent();
    xImage  GetLayer(int32_t position);
    int32_t GetNumLayers();
    uint32_t DumpSize();
    xImage  GetFrame(int32_t nFrame);
    
    void SetRetreiveAllFrames(bool flag);
    bool GetRetreiveAllFrames();
    uint8_t GetDisposalMethod();
    void SetDisposalMethod(uint8_t dm);
    void SetFrame(int32_t nFrame);
    int32_t GetNumFrames();
    void SetEscape(int32_t i);
    void SetProgress(int32_t p);
    int32_t GetEscape();
    int32_t GetProgress();
    void SetJpegScale(uint8_t q);
    uint8_t GetJpegScale();
    void SetJpegQualityF(float q);
    float GetJpegQualityF();
    uint8_t GetJpegQuality();
    void SetOffset(int32_t x,int32_t y);
    int,int GetOffset();
    void SetFrameDelay(uint32_t d);
    uint32_t    GetTransColor();
    int32_t GetTransIndex();
    void SetTransIndex(int32_t idx);
    uint32_t GetFrameDelay();
    uint32_t GetTypeIndexFromId( uint32_t id);
    uint32_t GetTypeIdFromIndex( uint32_t index);
    uint32_t GetTypeIdFromName(string ext);
    uint32_t GetNumTypes();
    bool SetType(uint32_t type);
    uint32_t GetNumColors();
    uint32_t GetEffWidth();
    bool GrayScale();
    
    uint8_t BlindSelectionGet( int32_t x, int32_t y);
    
    bool IsIndexed();
    void  BlindGetPixelPointer( int32_t x,  int32_t y);
    void SetClrImportant(uint32_t ncolors);
    uint32_t GetClrImportant();
    bool IsSamePalette(xImage img, bool bCheckAlpha);
    void SetStdPalette();
    bool GetTransparentMask(xImage iDst);

    void BlendPalette(uint32_t cr,int32_t perc);
    uint32_t GetPaletteColor(uint8_t i);

    void BlendPixelColor(int32_t x,int32_t y,uint32_t c, float blend, bool bSetAlpha);
    void SetPixelColor(int32_t x,int32_t y,uint32_t c, bool bSetAlpha);

    void SetPixelIndex(int32_t x,int32_t y,uint8_t i);
    uint8_t GetPixelGray(int32_t x, int32_t y);
    void SetPaletteColor(uint8_t idx, uint8_t r, uint8_t g, uint8_t b, uint8_t alpha);
    uint8_t GetPixelIndex(int32_t x,int32_t y);
    uint32_t GetPixelColor(int32_t x,int32_t y, bool bGetAlpha);
    bool IsTransparent(int32_t x, int32_t y);
    
    bool AlphaFromTransparency();
    bool AlphaPaletteSplit(xImage dest);
    bool AlphaSplit(xImage dest);
    bool AlphaMirror();
    bool AlphaFlip();
    uint8_t GetNearestIndex(uint32_t c);
    string  GetLastError();
    void Enable(bool enable);
    bool IsEnabled();
    bool IsValid();
    void BlindSetPixelColor(int32_t x,int32_t y,uint32_t c, bool bSetAlpha);
    uint32_t BlindGetPixelColor( int32_t x, int32_t y, bool bGetAlpha);
    void AlphaStrip();
    bool AlphaPaletteIsValid();
    uint8_t BlindGetPixelIndex( int32_t x, int32_t y);
    void BlindSetPixelIndex(int32_t x,int32_t y,uint8_t i);
    void SwapIndex(uint8_t idx1, uint8_t idx2);
    bool IsGrayScale();
    bool AlphaSet(xImage from);
    bool AlphaCopy(xImage from);
    void AlphaInvert();
    void AlphaClear();
    bool AlphaPaletteIsEnabled();
    void AlphaPaletteEnable(bool enable);
    bool AlphaIsValid();
    int AlphaSetMax(uint8_t nAlphaMax);
    uint8_t AlphaGetMax();
    int SetPaletteColor(uint8_t idx, uint32_t cr);
    uint32_t GetPaletteColor(uint8_t idx);
    int AlphaPaletteClear();
    uint8_t BlindAlphaGet( int32_t x, int32_t y);
    int_ptr_t  AlphaGetPointer( int32_t x, int32_t y);
    uint8_t AlphaGet( int32_t x, int32_t y);
    int AlphaSet(uint8_t level);
    int AlphaCreate();
    int SetGrayPalette();
    int DestroyFrames();
    int Transfer(xImage from, bool bTransferFrames);
    int Clear(uint8_t bval);
    bool IsInside(int32_t x, int32_t y);
    int AlphaDelete();
    int SelectionDelete();
    int_ptr_t  GetBits(uint32_t row);
    uint32_t GetPaletteSize();
    uint32_t GetPalette();
    int SetPalette(uint32_t pPal,uint32_t nColors);
    int32_t GetSize();
    uint32_t GetType();
    int GetBpp();
    int32_t GetHeight();
    int32_t GetWidth();
    void Create(uint32_t dwWidth, uint32_t dwHeight, uint32_t wBpp, uint32_t imagetype);
    int Ghost(xImage from);

    int Destroy();
    int Copy(xImage p);
    
    bool DrawLine(int StartX, int EndX, int StartY, int EndY, uint32_t color, bool bSetAlpha);
    int FillRect(int r[],uint32_t color,bool setAlpha);
    int DrawRect(int r[],uint32_t color,bool setAlpha);   

    int Blt(LuaHdc pDC, int x, int y);
    int Draw(LuaHdc hdc,  array<int> rect, array<int> pClipRect, bool bSmooth);
    int Draw(LuaHdc hdc, int x, int y, int cx, int cy, array<int>  pClipRect, bool bSmooth);
    int Draw2(LuaHdc hdc, array<int> rect);
    int Draw2(LuaHdc hdc, int x, int y, int cx, int cy);
    int Stretch(LuaHdc hdc,  array<int> rect, uint32_t dwRop);
    int Stretch(LuaHdc hdc, int xoffset, int yoffset, int xsize, int ysize, uint32_t dwRop);
    int DrawString(LuaHdc hdc, int x, int y,  string text, uint32_t color, 
        string font, int lSize, int lWeight, uint8_t bItalic, uint8_t bUnderline, bool bSetAlpha);
}

class xImageGIF : xImage
{
    void xImageGIF();
    BOOL DecodeExtension(FileBase fp);
    void EncodeLoopExtension(FileBase fp);
    void EncodeBody(FileBase fp, BOOL bLocalColorMap);
    void EncodeExtension(FileBase fp);
    void EncodeComment(FileBase fp);
    void EncodeHeader(FileBase fp);
    BOOL EncodeRGB(FileBase fp);
    int GetPixelIndex(int x,int y);
    int GifNextPixel( );
    
    BOOL Decode(FileBase  fp);
    BOOL Encode(FileBase  fp, array<xImage> pImages, BOOL bLocalColorMap, BOOL bLocalDispMeth);
    BOOL Encode(FileBase  fp);
    void SetLoops(int loops);
    int GetLoops();
    void SetComment(string sz_comment_in);
    string GetComment();
}

class GifEncoder{

    void GifEncoder();
	status_t AddFrame(xImage img);
	status_t End();
	status_t Begin(string filename);
	status_t Begin(FileBase file);    
    status_t Destroy();
    int GetLoops();
    bool GetLocalDispMeth();
    bool GetLocalColorMap();
    status_t SetLoops(int _loops);
    status_t SetLocalDispMeth(bool _localdispmeth);
    status_t SetLocalColorMap(bool _localcolormap);
    status_t SetComment(string comment);
    status_t SetDisposalMethod(uint8_t dm);
}



